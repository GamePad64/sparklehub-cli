# coding: utf-8

"""
    SparkleHub API

    Test description  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: alex@shishenko.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sparklehub.openapi_client.configuration import Configuration


class Package(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'release': 'str',
        'slug': 'str',
        'url': 'str',
        'size': 'int',
        'signature_dsa': 'str',
        'signature_eddsa': 'str',
        'bundle_version': 'str',
        'platform': 'str',
        'installer_args': 'str',
        'installer': 'str'
    }

    attribute_map = {
        'id': 'id',
        'release': 'release',
        'slug': 'slug',
        'url': 'url',
        'size': 'size',
        'signature_dsa': 'signature_dsa',
        'signature_eddsa': 'signature_eddsa',
        'bundle_version': 'bundle_version',
        'platform': 'platform',
        'installer_args': 'installer_args',
        'installer': 'installer'
    }

    def __init__(self, id=None, release=None, slug=None, url=None, size=None, signature_dsa=None, signature_eddsa=None, bundle_version=None, platform=None, installer_args=None, installer=None, local_vars_configuration=None):  # noqa: E501
        """Package - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._release = None
        self._slug = None
        self._url = None
        self._size = None
        self._signature_dsa = None
        self._signature_eddsa = None
        self._bundle_version = None
        self._platform = None
        self._installer_args = None
        self._installer = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.release = release
        self.slug = slug
        self.url = url
        if size is not None:
            self.size = size
        self.signature_dsa = signature_dsa
        self.signature_eddsa = signature_eddsa
        self.bundle_version = bundle_version
        self.platform = platform
        self.installer_args = installer_args
        self.installer = installer

    @property
    def id(self):
        """Gets the id of this Package.  # noqa: E501


        :return: The id of this Package.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.


        :param id: The id of this Package.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def release(self):
        """Gets the release of this Package.  # noqa: E501


        :return: The release of this Package.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Package.


        :param release: The release of this Package.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and release is None:  # noqa: E501
            raise ValueError("Invalid value for `release`, must not be `None`")  # noqa: E501

        self._release = release

    @property
    def slug(self):
        """Gets the slug of this Package.  # noqa: E501


        :return: The slug of this Package.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Package.


        :param slug: The slug of this Package.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and len(slug) > 50):
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and len(slug) < 1):
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug)):  # noqa: E501
            raise ValueError(r"Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")  # noqa: E501

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this Package.  # noqa: E501


        :return: The url of this Package.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Package.


        :param url: The url of this Package.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 200):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def size(self):
        """Gets the size of this Package.  # noqa: E501


        :return: The size of this Package.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Package.


        :param size: The size of this Package.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def signature_dsa(self):
        """Gets the signature_dsa of this Package.  # noqa: E501


        :return: The signature_dsa of this Package.  # noqa: E501
        :rtype: str
        """
        return self._signature_dsa

    @signature_dsa.setter
    def signature_dsa(self, signature_dsa):
        """Sets the signature_dsa of this Package.


        :param signature_dsa: The signature_dsa of this Package.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                signature_dsa is not None and len(signature_dsa) > 300):
            raise ValueError("Invalid value for `signature_dsa`, length must be less than or equal to `300`")  # noqa: E501

        self._signature_dsa = signature_dsa

    @property
    def signature_eddsa(self):
        """Gets the signature_eddsa of this Package.  # noqa: E501


        :return: The signature_eddsa of this Package.  # noqa: E501
        :rtype: str
        """
        return self._signature_eddsa

    @signature_eddsa.setter
    def signature_eddsa(self, signature_eddsa):
        """Sets the signature_eddsa of this Package.


        :param signature_eddsa: The signature_eddsa of this Package.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                signature_eddsa is not None and len(signature_eddsa) > 300):
            raise ValueError("Invalid value for `signature_eddsa`, length must be less than or equal to `300`")  # noqa: E501

        self._signature_eddsa = signature_eddsa

    @property
    def bundle_version(self):
        """Gets the bundle_version of this Package.  # noqa: E501


        :return: The bundle_version of this Package.  # noqa: E501
        :rtype: str
        """
        return self._bundle_version

    @bundle_version.setter
    def bundle_version(self, bundle_version):
        """Sets the bundle_version of this Package.


        :param bundle_version: The bundle_version of this Package.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bundle_version is None:  # noqa: E501
            raise ValueError("Invalid value for `bundle_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bundle_version is not None and len(bundle_version) > 25):
            raise ValueError("Invalid value for `bundle_version`, length must be less than or equal to `25`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bundle_version is not None and len(bundle_version) < 1):
            raise ValueError("Invalid value for `bundle_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._bundle_version = bundle_version

    @property
    def platform(self):
        """Gets the platform of this Package.  # noqa: E501


        :return: The platform of this Package.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Package.


        :param platform: The platform of this Package.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"windows", "windows-x86", "windows-x64", "macos"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and platform not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def installer_args(self):
        """Gets the installer_args of this Package.  # noqa: E501


        :return: The installer_args of this Package.  # noqa: E501
        :rtype: str
        """
        return self._installer_args

    @installer_args.setter
    def installer_args(self, installer_args):
        """Sets the installer_args of this Package.


        :param installer_args: The installer_args of this Package.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                installer_args is not None and len(installer_args) > 300):
            raise ValueError("Invalid value for `installer_args`, length must be less than or equal to `300`")  # noqa: E501

        self._installer_args = installer_args

    @property
    def installer(self):
        """Gets the installer of this Package.  # noqa: E501


        :return: The installer of this Package.  # noqa: E501
        :rtype: str
        """
        return self._installer

    @installer.setter
    def installer(self, installer):
        """Sets the installer of this Package.


        :param installer: The installer of this Package.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"innosetup", "msi", "nsis"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and installer not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `installer` ({0}), must be one of {1}"  # noqa: E501
                .format(installer, allowed_values)
            )

        self._installer = installer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Package):
            return True

        return self.to_dict() != other.to_dict()
