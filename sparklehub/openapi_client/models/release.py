# coding: utf-8

"""
    SparkleHub API

    Test description  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: alex@shishenko.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sparklehub.openapi_client.configuration import Configuration


class Release(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'channel': 'str',
        'version': 'str',
        'published': 'bool',
        'pub_date': 'datetime',
        'release_date': 'datetime',
        'title': 'str',
        'critical': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'channel': 'channel',
        'version': 'version',
        'published': 'published',
        'pub_date': 'pub_date',
        'release_date': 'release_date',
        'title': 'title',
        'critical': 'critical'
    }

    def __init__(self, id=None, channel=None, version=None, published=None, pub_date=None, release_date=None, title=None, critical=None, local_vars_configuration=None):  # noqa: E501
        """Release - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._channel = None
        self._version = None
        self._published = None
        self._pub_date = None
        self._release_date = None
        self._title = None
        self._critical = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.channel = channel
        self.version = version
        if published is not None:
            self.published = published
        if pub_date is not None:
            self.pub_date = pub_date
        if release_date is not None:
            self.release_date = release_date
        self.title = title
        if critical is not None:
            self.critical = critical

    @property
    def id(self):
        """Gets the id of this Release.  # noqa: E501


        :return: The id of this Release.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Release.


        :param id: The id of this Release.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def channel(self):
        """Gets the channel of this Release.  # noqa: E501


        :return: The channel of this Release.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Release.


        :param channel: The channel of this Release.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and channel is None:  # noqa: E501
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def version(self):
        """Gets the version of this Release.  # noqa: E501


        :return: The version of this Release.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Release.


        :param version: The version of this Release.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 25):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `25`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def published(self):
        """Gets the published of this Release.  # noqa: E501


        :return: The published of this Release.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Release.


        :param published: The published of this Release.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def pub_date(self):
        """Gets the pub_date of this Release.  # noqa: E501


        :return: The pub_date of this Release.  # noqa: E501
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this Release.


        :param pub_date: The pub_date of this Release.  # noqa: E501
        :type: datetime
        """

        self._pub_date = pub_date

    @property
    def release_date(self):
        """Gets the release_date of this Release.  # noqa: E501


        :return: The release_date of this Release.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Release.


        :param release_date: The release_date of this Release.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def title(self):
        """Gets the title of this Release.  # noqa: E501


        :return: The title of this Release.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Release.


        :param title: The title of this Release.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 50):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `50`")  # noqa: E501

        self._title = title

    @property
    def critical(self):
        """Gets the critical of this Release.  # noqa: E501


        :return: The critical of this Release.  # noqa: E501
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this Release.


        :param critical: The critical of this Release.  # noqa: E501
        :type: bool
        """

        self._critical = critical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Release):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Release):
            return True

        return self.to_dict() != other.to_dict()
